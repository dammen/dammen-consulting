{"version":3,"sources":["contexts/config.ts","components/NavMenu.tsx","components/Layout.tsx","components/Home.tsx","components/Admin.tsx","components/Projects.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ConfigContext","createContext","NavMenu","props","useState","collapsed","setCollapsed","config","useContext","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","isLoggedIn","name","Layout","children","Home","Admin","Projects","App","setConfig","useEffect","didUnmount","a","fetch","then","response","json","data","console","log","err","fetchData","Provider","value","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wVAGaA,EAAgBC,wBAA6B,MCO7CC,G,MAA6B,SAACC,GAAW,IAAD,EAEfC,oBAAS,GAFM,mBAE1CC,EAF0C,KAE/BC,EAF+B,KAI3CC,EAASC,qBAAWR,GAM1B,OACI,gCACI,kBAACS,EAAA,EAAD,CAAQC,UAAU,+EAA+EC,OAAK,GAClG,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAaC,IAAKC,IAAMC,GAAG,KAA3B,qBACA,kBAACC,EAAA,EAAD,CAAeC,QATV,WACjBZ,GAAcD,IAQoCK,UAAU,SAChD,kBAACS,EAAA,EAAD,CAAUT,UAAU,uCAAuCU,OAAQf,EAAWgB,QAAM,GAChF,wBAAIX,UAAU,wBACV,kBAACY,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAST,IAAKC,IAAML,UAAU,YAAYM,GAAG,KAA7C,SAEJ,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAST,IAAKC,IAAML,UAAU,YAAYM,GAAG,aAA7C,aAEHT,GAAUA,EAAOiB,WACd,oCACI,kBAACF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAST,IAAKC,IAAML,UAAU,YAAYM,GAAG,yBAAyBT,EAAOkB,OAEjF,kBAACH,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAST,IAAKC,IAAML,UAAU,YAAYM,GAAG,mBAA7C,WAIR,oCACI,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAST,IAAKC,IAAML,UAAU,YAAYM,GAAG,kBAA7C,UAEJ,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAST,IAAKC,IAAML,UAAU,YAAYM,GAAG,qBAA7C,qBC5C3BU,EAAmC,SAACvB,GAE7C,OACE,6BACE,kBAAC,EAAD,MACA,kBAACS,EAAA,EAAD,KACGT,EAAMwB,YCTJC,EAA2B,WAEpC,OACE,kDCCOC,EAA2B,SAAC1B,GAGrC,OACI,uDCNK2B,EAA8B,WACzC,OACE,iDCKSC,G,MAAyB,WAAO,IAAD,EAEZ3B,mBAAwB,MAFZ,mBAEjCG,EAFiC,KAEzByB,EAFyB,KA2BxC,OAvBAC,qBAAU,WACN,IAAIC,GAAa,EAiBjB,OAfe,uCAAG,sBAAAC,EAAA,sDAEd,IACIC,MAAM,WAAWC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAAQF,MAAK,SAACG,GACvDC,QAAQC,IAAI,oBAAqBF,GAC5BN,GACDF,EAAUQ,MAKpB,MAAOG,GAAMF,QAAQC,IAAIC,GAXb,2CAAH,oDAafC,GAEO,WACHV,GAAa,KAElB,IAEC3B,EAGI,kBAACP,EAAc6C,SAAf,CAAwBC,MAAOvC,GAC3B,kBAAC,IAAD,KACI,kBAAC,EAAD,KACI,kBAAC,IAAD,CAAOwC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjC,kBAAC,IAAD,CAAOoB,KAAK,YAAYC,UAAWnB,IACnC,kBAAC,IAAD,CAAOkB,KAAK,SAASC,UAAWpB,IAChC,kBAAC,IAAD,CAAOmB,KAAK,WAAWC,UAAWpB,OAQ/C,sDC3CSqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.1ced3f27.chunk.js","sourcesContent":["import {createContext} from 'react';\nimport {Config} from '../types/config';\n\nexport const ConfigContext = createContext<Config | null>(null)\n","import React, {FunctionComponent, useState, useContext} from 'react';\r\nimport {Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport {ConfigContext} from '../contexts/config';\r\nimport './NavMenu.css';\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nexport const NavMenu: FunctionComponent = (props) => {\r\n\r\n    const [collapsed, setCollapsed] = useState(true);\r\n\r\n    const config = useContext(ConfigContext);\r\n\r\n    const toggleNavbar = () => {\r\n        setCollapsed(!collapsed);\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\r\n                <Container>\r\n                    <NavbarBrand tag={Link} to=\"/\">Dammen Consulting</NavbarBrand>\r\n                    <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\r\n                    <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={collapsed} navbar>\r\n                        <ul className=\"navbar-nav flex-grow\">\r\n                            <NavItem>\r\n                                <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink tag={Link} className=\"text-dark\" to=\"/projects\">Projects</NavLink>\r\n                            </NavItem>\r\n                            {config && config.isLoggedIn ?\r\n                                <>\r\n                                    <NavItem>\r\n                                        <NavLink tag={Link} className=\"text-dark\" to=\"/Account/Manage/Index\">{config.name}</NavLink>\r\n                                    </NavItem>\r\n                                    <NavItem>\r\n                                        <NavLink tag={Link} className=\"text-dark\" to=\"/Account/logout\">Login</NavLink>\r\n                                    </NavItem>\r\n                                </>\r\n                                :\r\n                                <>\r\n                                    <NavItem>\r\n                                        <NavLink tag={Link} className=\"text-dark\" to=\"/Account/Login\">Login</NavLink>\r\n                                    </NavItem>\r\n                                    <NavItem>\r\n                                        <NavLink tag={Link} className=\"text-dark\" to=\"/Account/Register\">Register</NavLink>\r\n                                    </NavItem>\r\n                                </>\r\n                            }\r\n\r\n                        </ul>\r\n                    </Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </header>\r\n    );\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\ninterface Props {}\r\nexport const Layout: FunctionComponent<Props> = (props) => {\r\n\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n          {props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nexport const Home: FunctionComponent =  () =>  {\r\n\r\n    return (\r\n      <div>\r\n        Nice to meet you\r\n      </div>\r\n    );\r\n  \r\n}\r\n","import React, {FunctionComponent} from 'react'\n\ninterface Props {\n\n}\n\nexport const Admin: FunctionComponent = (props: Props) => {\n\n\n    return (\n        <div>\n            Welcome to admin page\n        </div>\n    )\n}\n\n","\r\n\r\nimport React, {FunctionComponent} from 'react'\r\n\r\nexport const Projects: FunctionComponent = () => {\r\n  return (\r\n    <div>\r\n      Projects coming\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, {FunctionComponent, useEffect, useState} from 'react';\r\nimport {Route} from 'react-router';\r\nimport {Layout} from './components/Layout';\r\nimport {Home} from './components/Home';\r\nimport {Admin} from './components/Admin';\r\nimport {Projects} from './components/Projects';\r\nimport {Config} from './types/config';\r\nimport {ConfigContext} from './contexts/config';\r\nimport './custom.css'\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nexport const App: FunctionComponent = () => {\r\n\r\n    const [config, setConfig] = useState<Config | null>(null);\r\n\r\n    useEffect(() => {\r\n        let didUnmount = false;\r\n\r\n        const fetchData = async (): Promise<void> => {\r\n\r\n            try {\r\n                fetch(\"/config\").then((response) => response.json()).then((data) => {\r\n                    console.log('This is your data', data)\r\n                    if (!didUnmount) {\r\n                        setConfig(data)\r\n\r\n                    }\r\n                });\r\n\r\n            } catch (err) {console.log(err)}\r\n        }\r\n        fetchData();\r\n\r\n        return (): void => {\r\n            didUnmount = true;\r\n        };\r\n    }, [])\r\n\r\n    if (config) {\r\n        return (\r\n\r\n            <ConfigContext.Provider value={config}>\r\n                <BrowserRouter>\r\n                    <Layout>\r\n                        <Route exact path='/' component={Home} />\r\n                        <Route path='/projects' component={Projects} />\r\n                        <Route path='/admin' component={Admin} />\r\n                        <Route path='/account' component={Admin} />\r\n                    </Layout>\r\n                </BrowserRouter>\r\n\r\n            </ConfigContext.Provider>\r\n\r\n        );\r\n    }\r\n    return <div>Cant find config...</div>\r\n\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}