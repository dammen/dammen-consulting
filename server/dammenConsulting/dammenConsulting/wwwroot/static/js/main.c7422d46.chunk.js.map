{"version":3,"sources":["components/NavMenu.tsx","components/Layout.tsx","components/Home.tsx","components/Admin.tsx","components/Projects.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["NavMenu","props","useState","collapsed","setCollapsed","config","useContext","ConfigContext","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","isLoggedIn","name","Layout","children","Home","Admin","Projects","createContext","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","baseUrl","document","getElementsByTagName","getAttribute","undefined","rootElement","getElementById","ReactDOM","render","basename","setConfig","useEffect","didUnmount","a","fetch","response","json","data","err","fetchData","Provider","value","exact","path","component","URL","origin","addEventListener","process","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c7422d46.chunk.js","sourcesContent":["import React, {FunctionComponent, useState, useContext} from 'react';\r\nimport {Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport './NavMenu.css';\r\nimport {ConfigContext} from '../App';\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nexport const NavMenu: FunctionComponent = (props) => {\r\n\r\n    const [collapsed, setCollapsed] = useState(true);\r\n\r\n    const config = useContext(ConfigContext);\r\n\r\n    const toggleNavbar = () => {\r\n        setCollapsed(!collapsed);\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\r\n                <Container>\r\n                    <NavbarBrand tag={Link} to=\"/\">Dammen Consulting</NavbarBrand>\r\n                    <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\r\n                    <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={collapsed} navbar>\r\n                        <ul className=\"navbar-nav flex-grow\">\r\n                            <NavItem>\r\n                                <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink tag={Link} className=\"text-dark\" to=\"/projects\">Projects</NavLink>\r\n                            </NavItem>\r\n                            {config && config.isLoggedIn ?\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/Account/Manage/Index\">{config.name}</NavLink>\r\n                                </NavItem>\r\n                                :\r\n                                <>\r\n                                    <NavItem>\r\n                                        <NavLink tag={Link} className=\"text-dark\" to=\"/Account/Login\">Login</NavLink>\r\n                                    </NavItem>\r\n                                    <NavItem>\r\n                                        <NavLink tag={Link} className=\"text-dark\" to=\"/Account/Register\">Register</NavLink>\r\n                                    </NavItem>\r\n                                </>\r\n                            }\r\n\r\n                        </ul>\r\n                    </Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </header>\r\n    );\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\ninterface Props {}\r\nexport const Layout: FunctionComponent<Props> = (props) => {\r\n\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n          {props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nexport const Home: FunctionComponent =  () =>  {\r\n\r\n    return (\r\n      <div>\r\n        Nice to meet you\r\n      </div>\r\n    );\r\n  \r\n}\r\n","import React, {FunctionComponent, useEffect, useState} from 'react'\n\ninterface Props {\n    \n}\n\nexport const Admin:FunctionComponent = (props: Props) => {\n\n    \n    return (\n        <div>\n            Welcome to admin page\n        </div>\n    )\n}\n\n","\r\n\r\nimport React, {FunctionComponent} from 'react'\r\n\r\nexport const Projects: FunctionComponent = () => {\r\n  return (\r\n    <div>\r\n      Projects coming\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, {FunctionComponent, useEffect, useState, createContext} from 'react';\r\nimport {Route} from 'react-router';\r\nimport {Layout} from './components/Layout';\r\nimport {Home} from './components/Home';\r\nimport {Admin} from './components/Admin';\r\nimport {Projects} from './components/Projects';\r\n\r\nimport './custom.css'\r\n\r\ninterface Config {\r\n    name: string;\r\n    isLoggedIn: boolean;\r\n}\r\nexport const ConfigContext = createContext<Config | null>(null)\r\n\r\nexport const App: FunctionComponent = () => {\r\n\r\n    const [config, setConfig] = useState<Config | null>(null);\r\n\r\n    useEffect(() => {\r\n        let didUnmount = false;\r\n\r\n        const fetchData = async (): Promise<void> => {\r\n\r\n            try {\r\n                fetch(\"/config\").then((response) => response.json()).then((data) => {\r\n                    console.log('This is your data', data)\r\n                    if (!didUnmount) {\r\n                        setConfig(data)\r\n\r\n                    }\r\n                });\r\n\r\n            } catch (err) {console.log(err)}\r\n        }\r\n        fetchData();\r\n\r\n        return (): void => {\r\n            didUnmount = true;\r\n        };\r\n    }, [])\r\n\r\n    return (\r\n        <ConfigContext.Provider value={config}>\r\n            <Layout>\r\n                <Route exact path='/' component={Home} />\r\n                <Route path='/projects' component={Projects} />\r\n                <Route path='/admin' component={Admin} />\r\n            </Layout>\r\n        </ConfigContext.Provider>\r\n\r\n    );\r\n\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL || \"\", window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport {App} from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') || undefined;\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}